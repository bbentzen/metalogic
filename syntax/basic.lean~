/-
Copyright (c) 2017 Bruno Bentzen. All rights reserved.
Released under the Apache License 2.0 (see "License");
Author: Bruno Bentzen
-/

import .language.basic .context.basic

open list nat bool

/- the K system -/

inductive prf : ctx → form → Prop
| pl1 {Γ : ctx} {p q : form} : prf Γ (p ⊃ (q ⊃ p))
| pl2 {Γ : ctx} {p q r : form} : prf Γ ((p ⊃ (q ⊃ r)) ⊃ ((p ⊃ q) ⊃ (p ⊃ r)))
| pl3 {Γ : ctx} {p q : form} :  prf Γ (((~p) ⊃ ~q) ⊃ ((~p ⊃ q) ⊃ p))
| mp {Γ : ctx}  {p q : form} (d₁: prf Γ (p ⊃ q)) (d₂ : prf Γ p) : prf Γ q
| k {Γ : ctx}  {p q : form} : prf Γ ((◻(p ⊃ q)) ⊃ ((◻p) ⊃ (◻q)))
| nec {Γ : ctx} {p : form} (d : prf nil p) : prf Γ (◻p)

axiom ax {Γ : ctx} {p : form} (d : p ∈ Γ) : prf Γ p

notation Γ `⊢ₖ` p := prf Γ p
notation α `⇒` β := α → β 

def deduction {Γ : ctx} (p q : form) :
  (Γ ⸴ p ⊢ₖ q) ⇒ (Γ ⊢ₖ p ⊃ q) :=
begin
 intro H,
 induction H,
   exact prf.mp prf.pl1 prf.pl1,
   exact prf.mp prf.pl1 (prf.pl2),
   exact prf.mp prf.pl1 (prf.pl3),
   exact prf.mp (prf.mp prf.pl2 H_ih_d₁) H_ih_d₂,
   exact prf.mp prf.pl1 prf.k,
   exact prf.mp prf.pl1 (prf.nec H_d)
end

def weak (p q : form) (Γ : ctx):
  (Γ ⊢ₖ p) ⇒ (Γ ⸴ q ⊢ₖ p) :=
begin
  intro H,
  induction H,
    exact prf.pl1,
    exact prf.pl2,
    exact prf.pl3,
    exact prf.mp H_ih_d₁ H_ih_d₂,
    exact prf.k,
    exact prf.nec H_d
end

def contr (p q : form) (Γ : ctx):
  (Γ ⸴ p ⸴ p ⊢ₖ q) ⇒ (Γ ⸴ p ⊢ₖ q) :=
begin
  intro H,
  induction H,
    exact prf.pl1,
    exact prf.pl2,
    exact prf.pl3,
    exact prf.mp H_ih_d₁ H_ih_d₂,
    exact prf.k,
    exact prf.nec H_d
end

def exg (p q r : form) (Γ : ctx):
  (Γ ⸴ p ⸴ q ⊢ₖ r) ⇒ (Γ ⸴ q ⸴ p ⊢ₖ r) :=
begin
  intro H,
  induction H,
    exact prf.pl1,
    exact prf.pl2,
    exact prf.pl3,
    exact prf.mp H_ih_d₁ H_ih_d₂,
    exact prf.k,
    exact prf.nec H_d
end
